
int block_id = item.get_group(0);
int thread_id = item.get_local_id(0);
int i = item.get_global_id(0);
int y;
int indX, indY;
float u, v;


if(i < Nparticles){
  arrayX_acc[i] = xj_acc[i]; 
  arrayY_acc[i] = yj_acc[i]; 

  weights_acc[i] = 1.0f / ((float) (Nparticles)); 
  seed_acc[i] = (A*seed_acc[i] + C) % M;
  u = cl::sycl::fabs(seed_acc[i]/((float)M));
  seed_acc[i] = (A*seed_acc[i] + C) % M;
  v = cl::sycl::fabs(seed_acc[i]/((float)M));
  arrayX_acc[i] += 1.0f + 5.0f*(cl::sycl::sqrt(-2.0f*cl::sycl::log(u))*cl::sycl::cos(2.0f*PI*v));

  seed_acc[i] = (A*seed_acc[i] + C) % M;
  u = cl::sycl::fabs(seed_acc[i]/((float)M));
  seed_acc[i] = (A*seed_acc[i] + C) % M;
  v = cl::sycl::fabs(seed_acc[i]/((float)M));
  arrayY_acc[i] += -2.0f + 2.0f*(cl::sycl::sqrt(-2.0f*cl::sycl::log(u))*cl::sycl::cos(2.0f*PI*v));

}

item.barrier(access::fence_space::local_space);


if(i < Nparticles)
{
  for(y = 0; y < countOnes; y++){

    int iX = arrayX_acc[i];
    int iY = arrayY_acc[i];
    int rnd_iX = (arrayX_acc[i] - iX) < .5f ? iX : iX++;
    int rnd_iY = (arrayY_acc[i] - iY) < .5f ? iY : iY++;
    indX = rnd_iX + objxy_acc[y*2 + 1];
    indY = rnd_iY + objxy_acc[y*2];

    ind_acc[i*countOnes + y] = (indX*IszY*Nfr + indY*Nfr + k) >= 0 ? 
      (indX*IszY*Nfr + indY*Nfr + k) : -(indX*IszY*Nfr + indY*Nfr + k);
    if(ind_acc[i*countOnes + y] >= max_size)
      ind_acc[i*countOnes + y] = 0;
  }
  float likelihoodSum = 0.0f;
  for(int x = 0; x < countOnes; x++)
    likelihoodSum += ((I_acc[ind_acc[i*countOnes + x]] - 100) * (I_acc[ind_acc[i*countOnes + x]] - 100) -
        (I_acc[ind_acc[i*countOnes + x]] - 228) * (I_acc[ind_acc[i*countOnes + x]] - 228)) / 50.0f;
  likelihood_acc[i] = likelihoodSum/countOnes-SCALE_FACTOR;

  weights_acc[i] = weights_acc[i] * cl::sycl::exp(likelihood_acc[i]); //Donnie Newell - added the missing exponential function call

}

weights_local[thread_id] = 0.0f; //weights_local[thread_id] = i;

item.barrier(access::fence_space::local_space);


if(i < Nparticles){
  weights_local[thread_id] = weights_acc[i];
}

item.barrier(access::fence_space::local_space);

for(unsigned int s=BLOCK_SIZE/2; s>0; s>>=1)
{
  if(thread_id < s)
  {
    weights_local[thread_id] += weights_local[thread_id + s];
  }
  item.barrier(access::fence_space::local_space);
}
if(thread_id == 0)
{
  partial_sums_acc[block_id] = weights_local[0];
}
