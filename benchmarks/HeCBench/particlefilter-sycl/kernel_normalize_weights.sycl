int local_id = item.get_local_id(0);
int i = item.get_global_id(0);
if(0 == local_id)
  sumWeights[0] = partial_sums[0];
item.barrier(access::fence_space::local_space);
if(i < Nparticles) {
    weights[i] = weights[i]/sumWeights[0];
}
item.barrier(access::fence_space::local_space);
if(i == 0) {
  CDF[0] = weights[0];
  for(int x = 1; x < Nparticles; x++){
    CDF[x] = weights[x] + CDF[x-1];
  }

  seed[i] = (A*seed[i] + C) % M;
  float p = cl::sycl::fabs(seed[i]/((float)M));
  seed[i] = (A*seed[i] + C) % M;
  float q = cl::sycl::fabs(seed[i]/((float)M));
  u[0] = (1.0f/((float)(Nparticles))) * 
    (cl::sycl::sqrt(-2.0f*cl::sycl::log(p))*cl::sycl::cos(2.0f*PI*q));
  // do this to allow all threads in all blocks to use the same u1
}
item.barrier(access::fence_space::local_space);
if(0 == local_id)
  u1[0] = u[0];
item.barrier(access::fence_space::local_space);
if(i < Nparticles)
{
  u[i] = u1[0] + i/((float)(Nparticles));
}
