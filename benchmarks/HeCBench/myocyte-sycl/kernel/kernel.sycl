

//========================================================================================================================================================================================================200
//	KERNEL_CAM
//========================================================================================================================================================================================================200


//========================================================================================================================================================================================================200
//	KERNEL
//========================================================================================================================================================================================================200


	//======================================================================================================================================================150
	// 	VARIABLES
	//======================================================================================================================================================150

	// CUDA indexes
	int bx;																				// get current horizontal block index (0-n)
	int tx;																				// get current horizontal thread index (0-n)

	// pointers
	int valu_offset;																	// inivalu and finavalu offset
	int params_offset;																	// parameters offset
	int com_offset;																		// kernel1-kernel2 communication offset

	// module parameters
	FP CaDyad;																			// from ECC model, *** Converting from [mM] to [uM] ***
	FP CaSL;																			// from ECC model, *** Converting from [mM] to [uM] ***
	FP CaCyt;																			// from ECC model, *** Converting from [mM] to [uM] ***

	//======================================================================================================================================================150
	// 	COMPUTATION
	//======================================================================================================================================================150

	// indexes
	// bx = blockIdx.x;																// get current horizontal block index (0-n)
	// tx = threadIdx.x;																// get current horizontal thread index (0-n)
	bx = item.get_group(0);															// get current horizontal block index (0-n)
	tx = item.get_local_id(0);															// get current horizontal thread index (0-n)

	//====================================================================================================100
	//	ECC
	//====================================================================================================100

	// limit to useful threads
	if(bx == 0){																		// first processor runs ECC

		if(tx == 0){																	// only 1 thread runs it, since its a sequential code

			// thread offset
			valu_offset = 0;															//
			// ecc function
			kernel_ecc(	timeinst,
						d_initvalu_acc,
						d_finavalu_acc,
						valu_offset,
						d_params_acc);

		}

	}

	//====================================================================================================100
	//	CAM x 3
	//====================================================================================================100

	// limit to useful threads
	else if(bx == 1){																	// second processor runs CAMs (in parallel with ECC)

		if(tx == 0){																	// only 1 thread runs it, since its a sequential code

			// specific
			valu_offset = 46;
			params_offset = 0;
			com_offset = 0;
			CaDyad = d_initvalu_acc[35]*1e3;												// from ECC model, *** Converting from [mM] to [uM] ***
			// cam function for Dyad
			kernel_cam(	timeinst,
						d_initvalu_acc,
						d_finavalu_acc,
						valu_offset,
						d_params_acc,
						params_offset,
						d_com_acc,
						com_offset,
						CaDyad);

			// specific
			valu_offset = 61;
			params_offset = 5;
			com_offset = 1;
			CaSL = d_initvalu_acc[36]*1e3;													// from ECC model, *** Converting from [mM] to [uM] ***
			// cam function for Dyad
			kernel_cam(	timeinst,
						d_initvalu_acc,
						d_finavalu_acc,
						valu_offset,
						d_params_acc,
						params_offset,
						d_com_acc,
						com_offset,
						CaSL);

			// specific
			valu_offset = 76;
			params_offset = 10;
			com_offset = 2;
			CaCyt = d_initvalu_acc[37]*1e3;										// from ECC model, *** Converting from [mM] to [uM] ***
			// cam function for Dyad
			kernel_cam(	timeinst,
						d_initvalu_acc,
						d_finavalu_acc,
						valu_offset,
						d_params_acc,
						params_offset,
						d_com_acc,
						com_offset,
						CaCyt);

		}

	}

