#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <sys/time.h>
#include <math.h>
#include <vector>
#include "defs.h"

#include "io.c"

double
stop_watch(double t0) 
{
  double time;
  struct timeval t;
  gettimeofday(&t, NULL);
  time = (double) t.tv_sec + (double) t.tv_usec * 1e-6;  
  return time-t0;
}

void
usage(char *argv[]) {
  fprintf(stderr, " Usage: %s LX LY NITER IN_FILE\nIN_FILE can be generated by python mkinit LX LY IN_FILE\n", 
		  argv[0]);
  return;
}

int Lx, Ly;

int main(int argc, char *argv[]) {
  /* Check the number of command line arguments */
  if(argc != 5) {
    usage(argv);
    exit(1);
  }
  /* The length of the array in x and y is read from the command
     line */
  Lx = atoi(argv[1]);
  Ly = atoi(argv[2]);
  if (Lx % NTX != 0 ||  Ly % NTY != 0) {
    printf("Array length LX and LY must be a multiple of block size %d and %d, respectively\n", 
          NTX, NTY);
    exit(1);
  }
  /* The number of iterations */
  int niter = atoi(argv[3]);
  assert(niter >= 1);

  /* Fixed "sigma" */
  float sigma = 0.01;
  printf(" Ly,Lx = %d,%d\n", Ly, Lx);
  printf(" niter = %d\n", niter);
  printf(" input file = %s\n", argv[4]);

  float xdelta = sigma / (1.0+4.0*sigma);
  float xnorm = 1.0/(1.0+4.0*sigma);

  /* Allocate the buffer for the data */
  float *cpu_in = (float*) malloc(sizeof(float)*Lx*Ly);
  float *cpu_out = (float*) malloc(sizeof(float)*Lx*Ly);
  /* read file to buffer */
  read_from_file(cpu_in, argv[4]);

  /* do iterations, record time */
  double t0 = stop_watch(0);
  for(int i=0; i<niter; i++) {
    #pragma omp parallel for collapse(2) 
    for (int y = 0; y < Ly; y++)
      for (int x = 0; x < Lx; x++) {
        int v00 = y*Lx + x;
        int v0p = y*Lx + (x + 1)%Lx;
        int v0m = y*Lx + (Lx + x - 1)%Lx;
        int vp0 = ((y+1)%Ly)*Lx + x;
        int vm0 = ((Ly+y-1)%Ly)*Lx + x;
        cpu_out[v00] = xnorm*cpu_in[v00] + xdelta*(cpu_in[v0p] + cpu_in[v0m] + cpu_in[vp0] + cpu_in[vm0]);
      }
    float* tmp = cpu_out;
    cpu_out = cpu_in;
    cpu_in = tmp;
  }
  t0 = stop_watch(t0)/(double)niter;
  /* write the result after niter iteraions */

  /* write timing info */
  printf("Host: iters = %8d, (Lx,Ly) = %6d, %6d, t = %8.1f usec/iter, BW = %6.3f GB/s, P = %6.3f Gflop/s\n",
	 niter, Lx, Ly, t0*1e6, 
	 Lx*Ly*sizeof(float)*2.0/(t0*1.0e9), 
	 (Lx*Ly*6.0)/(t0*1.0e9));
  /*
   * GPU part
   */

  /* read file again for GPU run */
  float *in = (float*) malloc(sizeof(float)*Lx*Ly);
  float *out = (float*) malloc(sizeof(float)*Lx*Ly);
  read_from_file(in, argv[4]);

  /* Fixed number of threads per block (in x- and y-direction), number
     of blocks per direction determined by dimensions Lx, Ly */
#pragma omp target data map (tofrom: in[0:Lx*Ly]) map(alloc: out[0:Lx*Ly])
  {
    t0 = stop_watch(0);
    for(int i=0; i<niter; i++) {
      #pragma omp target teams distribute parallel for collapse(2) thread_limit(256)
      for (int y = 0; y < Ly; y++)
        for (int x = 0; x < Lx; x++) {
          int v00 = y*Lx + x;
          int v0p = y*Lx + (x + 1)%Lx;
          int v0m = y*Lx + (Lx + x - 1)%Lx;
          int vp0 = ((y+1)%Ly)*Lx + x;
          int vm0 = ((Ly+y-1)%Ly)*Lx + x;
          out[v00] = xnorm*in[v00] + xdelta*(in[v0p] + in[v0m] + in[vp0] + in[vm0]);
        }
      float* tmp = out;
      out = in;
      in = tmp;
    }
    t0 = stop_watch(t0)/(double)niter;
  }


  printf("Device: iters = %8d, (Lx,Ly) = %6d, %6d, t = %8.1f usec/iter, BW = %6.3f GB/s, P = %6.3f Gflop/s\n",
  	 niter, Lx, Ly, t0*1e6,
  	 Lx*Ly*sizeof(float)*2.0/(t0*1.0e9),
  	 (Lx*Ly*6.0)/(t0*1.0e9));

  float *gpu_arr = in;
  float *cpu_arr = cpu_in;
  // verification
  for (int i = 0; i < Lx*Ly; i++) {
    // choose 1e-2 because the error rate increases with the iteration from 1 to 100000
    if ( fabs(cpu_arr[i] - gpu_arr[i]) > 1e-2 ) {
	    printf("FAILED at %d cpu=%f gpu=%f\n", i, cpu_arr[i], gpu_arr[i]);
            /* free main memory array */
            free(cpu_arr);
            free(gpu_arr);
	    return 1;
    }
  }

  free(cpu_in);
  free(cpu_out);
  free(in);
  free(out);
  return 0;
}
